"""
create first version-tracked schema

Revision ID: 2951dc400ac9
Revises:
Create Date: 2023-09-17 17:34:42.090010

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector


# revision identifiers, used by Alembic.
revision: str = '2951dc400ac9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def _get_tables():
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    tables = inspector.get_table_names()
    return tables


all_tables = _get_tables()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if 'Albums' not in all_tables:
        op.create_table('Albums',
                        sa.Column('Id', sa.Integer(), nullable=False),
                        sa.Column('Artist', sa.String(), nullable=True),
                        sa.Column('Title', sa.String(), nullable=True),
                        sa.Column('VolumeCount', sa.Integer(), nullable=True),
                        sa.Column('MusicBrainzAlbumId', sa.String(), nullable=True),
                        sa.Column('MusicBrainzAlbumArtistId', sa.String(), nullable=True),
                        sa.Column('ReleaseYear', sa.Integer(), nullable=True),
                        sa.Column('IsCompilation', sa.Boolean(), nullable=True),
                        sa.PrimaryKeyConstraint('Id'))
    if 'Genres' not in all_tables:
        op.create_table('Genres',
                        sa.Column('Id', sa.Integer(), nullable=False),
                        sa.Column('Name', sa.String(), nullable=True),
                        sa.PrimaryKeyConstraint('Id'))
    if 'Playlists' not in all_tables:
        op.create_table('Playlists',
                        sa.Column('Id', sa.Integer(), nullable=False),
                        sa.Column('Title', sa.String(), nullable=True),
                        sa.PrimaryKeyConstraint('Id'))
    if 'RadioStations' not in all_tables:
        op.create_table('RadioStations',
                        sa.Column('Id', sa.Integer(), nullable=False),
                        sa.Column('Name', sa.String(), nullable=True),
                        sa.Column('Url', sa.String(), nullable=True),
                        sa.Column('ArtworkUrl', sa.String(), nullable=True),
                        sa.Column('NowPlayingUrl', sa.String(), nullable=True),
                        sa.Column('NowPlayingJq', sa.String(), nullable=True),
                        sa.PrimaryKeyConstraint('Id'))
    if 'Tracks' not in all_tables:
        op.create_table('Tracks',
                        sa.Column('Id', sa.Integer(), nullable=False),
                        sa.Column('Filepath', sa.String(), nullable=True),
                        sa.Column('Title', sa.String(), nullable=True),
                        sa.Column('Duration', sa.Integer(), nullable=True),
                        sa.Column('Composer', sa.String(), nullable=True),
                        sa.Column('Artist', sa.String(), nullable=True),
                        sa.Column('Genre', sa.Integer(), nullable=True),
                        sa.Column('VolumeNumber', sa.Integer(), nullable=True),
                        sa.Column('TrackCount', sa.Integer(), nullable=True),
                        sa.Column('TrackNumber', sa.Integer(), nullable=True),
                        sa.Column('ReleaseDate', sa.DateTime(), nullable=True),
                        sa.Column('MusicBrainzTrackId', sa.String(), nullable=True),
                        sa.Column('MusicBrainzArtistId', sa.String(), nullable=True),
                        sa.Column('Album', sa.Integer(), nullable=True),
                        sa.Column('ArtworkPath', sa.String(), nullable=True),
                        sa.Column('ArtworkBlob', sa.LargeBinary(), nullable=True),
                        sa.Column('ArtworkWidth', sa.Integer(), nullable=True),
                        sa.Column('ArtworkHeight', sa.Integer(), nullable=True),
                        sa.ForeignKeyConstraint(['Album'], ['Albums.Id'], ),
                        sa.ForeignKeyConstraint(['Genre'], ['Genres.Id'], ),
                        sa.PrimaryKeyConstraint('Id'))
    if 'association' not in all_tables:
        op.create_table('association',
                        sa.Column('genre_id', sa.Integer(), nullable=True),
                        sa.Column('album_id', sa.Integer(), nullable=True),
                        sa.ForeignKeyConstraint(['album_id'], ['Albums.Id'], ),
                        sa.ForeignKeyConstraint(['genre_id'], ['Genres.Id'], ))
    if 'playlist_to_genres' not in all_tables:
        op.create_table('playlist_to_genres',
                        sa.Column('genre_id', sa.Integer(), nullable=True),
                        sa.Column('playlist_id', sa.Integer(), nullable=True),
                        sa.ForeignKeyConstraint(['genre_id'], ['Genres.Id'], ),
                        sa.ForeignKeyConstraint(['playlist_id'], ['Playlists.Id'], ))
    if 'playlist_to_track' not in all_tables:
        op.create_table('playlist_to_track',
                        sa.Column('Id', sa.Integer(), nullable=False),
                        sa.Column('PlaylistId', sa.Integer(), nullable=True),
                        sa.Column('TrackId', sa.Integer(), nullable=True),
                        sa.Column('PlaylistIndex', sa.Integer(), nullable=True),
                        sa.ForeignKeyConstraint(['PlaylistId'], ['Playlists.Id'], ),
                        sa.ForeignKeyConstraint(['TrackId'], ['Tracks.Id'], ),
                        sa.PrimaryKeyConstraint('Id'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('playlist_to_track')
    op.drop_table('playlist_to_genres')
    op.drop_table('association')
    op.drop_table('Tracks')
    op.drop_table('RadioStations')
    op.drop_table('Playlists')
    op.drop_table('Genres')
    op.drop_table('Albums')
    # ### end Alembic commands ###
